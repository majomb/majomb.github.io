{"version":3,"sources":["index.js"],"names":["console","clear","asteroidBg","spaceShip","ASTEROID_MIN_SPEED","ASTEROID_MAX_SPEED","ASTEROID_MIN_HEALTH","ASTEROID_MAX_HEALTH","ASTEROID_MIN_SIZE","ASTEROID_MAX_SIZE","ASTEROID_MIN_POINTS","ASTEROID_MAX_POINTS","bgPadding","bgWidth","bgHeight","thrustImg","rotatePoint","point","origin","angle","delta","r","p5","Vector","sub","mag","tangle","atan2","y","x","cos","sin","createVector","asteroidShape","radiuses","xOffset","yOffset","highlight","strokeWeight","tint","push","translate","texture","beginShape","TWO_PI","length","i","a","sx","sy","vertex","endShape","CLOSE","pop","noTint","Asteroid","ship","asteroids","gameScore","location","velocity","speed","add","aVelocity","map","isVisible","isOut","health","Math","round","random","size","npoints","offset","Array","from","bgXOffset","bgYOffset","wasHit","updateOut","updateVisibility","rotate","XOffset","width","height","half","value","sides","Asteroids","Set","target","frameCount","xmin","xmax","ymin","ymax","side","normalize","mult","forEach","update","isDead","delete","draw","score","hit","Projectile","direction","life","copy","prevLocation","dir","setMag","stroke","color","line","Projectiles","projectiles","p","asteroid","nailedProjectiles","filter","contains","hitCount","ImpactProjectile","lifeSpan","lifeStep","scale","max","c","setAlpha","blendMode","SCREEN","fill","circle","BLEND","ImpactProjectiles","Ship","radians","acceleration","angleAcceleration","impactProjectiles","constrain","force","keyIsDown","rightCannon","leftCannon","x1","y1","x2","y2","x3","y3","v1","v2","v3","ambientLight","directionalLight","rotateZ","rotateX","model","applyForce","$gameScore","preload","loadImage","loadModel","setup","document","querySelector","remove","createCanvas","windowWidth","windowHeight","WEBGL","parent","getElementById","windowResized","resizeCanvas","LEFT_ARROW","left","RIGHT_ARROW","right","UP_ARROW","forward","DOWN_ARROW","backward","hitBy","drawScore","bounds","shoot","sScore","toString","padStart","innerText"],"mappings":"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","file":"asteroids.6b89b342.js","sourceRoot":"..","sourcesContent":["console.clear();\n\nconst ASTEROID_MIN_SPEED = 0.1;\nconst ASTEROID_MAX_SPEED = 3.5;\nconst ASTEROID_MIN_HEALTH = 1;\nconst ASTEROID_MAX_HEALTH = 10;\nconst ASTEROID_MIN_SIZE = 30;\nconst ASTEROID_MAX_SIZE = 60;\nconst ASTEROID_MIN_POINTS = 7;\nconst ASTEROID_MAX_POINTS = 15;\n\nlet asteroidBg;\nlet bgPadding = ASTEROID_MAX_SIZE * 3;\nlet bgWidth = 1920 - bgPadding;\nlet bgHeight = 1080 - bgPadding;\nlet thrustImg = null;\nlet spaceShip;\n\nfunction rotatePoint(point, origin, angle) {\n  const delta = p5.Vector.sub(origin, point);\n  // distance from triangle center to vertex\n  let r = delta.mag();\n\n  // angle between triangle center and vertex\n  const tangle = atan2(point.y - origin.y, point.x - origin.x);\n\n  // rotates point around origin by angle (incremented each frame)\n  // alse make sure that it starts from original angle between vertex and center\n  let x = origin.x + cos(angle + tangle) * r;\n  let y = origin.y + sin(angle + tangle) * r;\n\n  return createVector(x, y);\n}\n\nfunction asteroidShape(\n  x,\n  y,\n  radiuses,\n  xOffset = 0,\n  yOffset = 0,\n  highlight = false\n) {\n  strokeWeight(0);\n  if (highlight) {\n    tint(255, 127);\n  }\n  push();\n  translate(x, y, -10);\n  texture(asteroidBg);\n  beginShape();\n  let angle = TWO_PI / (radiuses.length - 1);\n  let i = 0;\n  for (let a = 0; a < TWO_PI; a += angle) {\n    let sx = cos(a) * radiuses[i];\n    let sy = sin(a) * radiuses[i];\n    vertex(sx, sy, sx + radiuses[i] + xOffset, sy + radiuses[i] + yOffset);\n    i++;\n  }\n  endShape(CLOSE);\n  pop();\n  noTint();\n}\n\nclass Asteroid {\n  constructor(location, velocity) {\n    this.location = location;\n    this.velocity = velocity;\n    this.angle = 0;\n    const speed = p5.Vector.sub(\n      location,\n      p5.Vector.add(location, velocity)\n    ).mag();\n    // static asteroids\n    this.aVelocity = speed\n      ? map(speed, ASTEROID_MIN_SPEED, ASTEROID_MAX_SPEED, 0.01, 0.1)\n      : 0;\n    this.isVisible = false;\n    this.isOut = false;\n    this.health = Math.round(random(ASTEROID_MIN_HEALTH, ASTEROID_MAX_HEALTH));\n    this.size = map(\n      this.health,\n      ASTEROID_MIN_HEALTH,\n      ASTEROID_MAX_HEALTH,\n      ASTEROID_MIN_SIZE,\n      ASTEROID_MAX_SIZE\n    );\n    this.npoints = Math.round(random(ASTEROID_MIN_POINTS, ASTEROID_MAX_POINTS));\n    const offset = this.size * 0.45;\n    this.radiuses = Array.from({ length: this.npoints + 1 }).map(() =>\n      random(this.size - offset, this.size)\n    );\n    this.bgXOffset = random(0, bgWidth);\n    this.bgYOffset = random(0, bgHeight);\n    this.wasHit = false;\n  }\n\n  update() {\n    this.wasHit = false;\n    this.angle += this.aVelocity;\n    this.location.add(this.velocity);\n    this.updateOut();\n    this.updateVisibility();\n  }\n\n  draw() {\n    push();\n    translate(this.location.x, this.location.y);\n    rotate(this.angle);\n    asteroidShape(\n      0,\n      0,\n      this.radiuses,\n      this.XOffset,\n      this.bgYOffset,\n      this.wasHit\n    );\n    pop();\n  }\n\n  updateVisibility() {\n    if (\n      this.location.x > 0 &&\n      this.location.x < width &&\n      this.location.y > 0 &&\n      this.location.y < height\n    ) {\n      this.isVisible = true;\n    }\n  }\n\n  updateOut() {\n    if (!this.isVisible) {\n      return;\n    }\n    if (\n      this.location.x < 0 ||\n      this.location.x > width ||\n      this.location.y < 0 ||\n      this.location.y > height\n    ) {\n      this.isOut = true;\n    }\n  }\n\n  isDead() {\n    return this.health <= 0;\n  }\n\n  contains(point) {\n    const half = this.size / 2;\n    if (\n      this.location.x - half <= point.x &&\n      point.x <= this.location.x + half &&\n      this.location.y - half <= point.y &&\n      point.y <= this.location.y + half\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  hit(value) {\n    this.health -= value;\n    this.wasHit = true;\n  }\n}\n\nconst sides = ['L', 'R', 'T', 'B'];\n\nclass Asteroids {\n  constructor() {\n    this.asteroids = new Set();\n  }\n\n  add(target) {\n    if (frameCount % 10 !== 0) {\n      return;\n    }\n\n    const value = random();\n    if (value > 0.1) {\n      return;\n    }\n\n    const xOffset = width * 0.2;\n    const yOffset = height * 0.2;\n\n    let xmin;\n    let xmax;\n    let ymin;\n    let ymax;\n\n    const side = random(sides);\n\n    if (side === 'T') {\n      xmin = -xOffset;\n      xmax = width + xOffset;\n      ymin = 0;\n      ymax = -yOffset;\n    }\n    if (side === 'R') {\n      xmin = width;\n      xmax = width + xOffset;\n      ymin = -yOffset;\n      ymax = height + yOffset;\n    }\n    if (side === 'B') {\n      xmin = -xOffset;\n      xmax = width + xOffset;\n      ymin = height;\n      ymax = height + yOffset;\n    }\n    if (side === 'L') {\n      xmin = -xOffset;\n      xmax = 0;\n      ymin = -yOffset;\n      ymax = height + yOffset;\n    }\n\n    const x = random(xmin, xmax);\n    const y = random(ymin, ymax);\n    const location = createVector(x, y);\n    const velocity = p5.Vector.sub(target, location);\n    velocity.normalize();\n    velocity.mult(random(ASTEROID_MIN_SPEED, ASTEROID_MAX_SPEED));\n    this.asteroids.add(new Asteroid(location, velocity));\n  }\n\n  update() {\n    this.asteroids.forEach((a) => {\n      a.update();\n      if (a.isOut || a.isDead()) {\n        this.asteroids.delete(a);\n      }\n    });\n  }\n\n  draw() {\n    this.asteroids.forEach((a) => {\n      a.draw();\n    });\n  }\n\n  hitBy(ship) {\n    let score = 0;\n    this.asteroids.forEach((a) => {\n      score += ship.hit(a);\n    });\n    return score;\n  }\n}\n\nclass Projectile {\n  constructor(location, direction) {\n    this.life = 255;\n    this.location = location.copy();\n    this.prevLocation = this.location.copy();\n    this.direction = direction;\n    this.angle = 0;\n    this.size = 5;\n  }\n  update() {\n    const dir = this.direction.copy();\n    dir.setMag(15);\n    dir.mult(-1);\n    this.prevLocation = this.location.copy();\n    this.location.add(dir);\n    this.life -= 1;\n  }\n  isDead() {\n    return (\n      this.location.x < 0 ||\n      this.location.x > width ||\n      this.location.y < 0 ||\n      this.location.y > height\n    );\n  }\n  draw() {\n    stroke(color('#E6F7D2'));\n    strokeWeight(3);\n    line(\n      this.prevLocation.x,\n      this.prevLocation.y,\n      this.location.x,\n      this.location.y\n    );\n  }\n}\n\nclass Projectiles {\n  constructor() {\n    this.projectiles = new Set();\n  }\n\n  add(location, direction) {\n    this.projectiles.add(new Projectile(location, direction));\n  }\n\n  update() {\n    this.projectiles.forEach((p) => {\n      p.update();\n      if (p.isDead()) {\n        this.projectiles.delete(p);\n      }\n    });\n  }\n\n  draw() {\n    this.projectiles.forEach((p) => {\n      p.draw();\n    });\n  }\n\n  hit(asteroid) {\n    const nailedProjectiles = Array.from(this.projectiles).filter((p) =>\n      asteroid.contains(p.location)\n    );\n    const hitCount = nailedProjectiles.length;\n    if (hitCount > 0) {\n      asteroid.hit(hitCount);\n    }\n    nailedProjectiles.forEach((p) => {\n      this.projectiles.delete(p);\n    });\n    return nailedProjectiles;\n  }\n}\n\nclass ImpactProjectile {\n  constructor(location) {\n    this.lifeSpan = 60 * 1;\n    this.life = this.lifeSpan;\n    this.lifeStep = 255 / this.life;\n    const offset = 20;\n    this.location = p5.Vector.add(\n      location,\n      createVector(random(-offset, offset), random(-offset, offset))\n    );\n    this.size = random(2, 10);\n  }\n  update() {\n    this.life -= this.lifeStep;\n  }\n  isDead() {\n    return this.life <= 0;\n  }\n  draw() {\n    push();\n    translate(this.location.x, this.location.y, 5);\n    scale(max(1, this.life) / max(1, this.lifeSpan));\n    const c = color('#F4F590');\n    c.setAlpha(this.life);\n    blendMode(SCREEN);\n    fill(c);\n    stroke(c);\n    circle(0, 0, this.size);\n    blendMode(BLEND);\n    pop();\n  }\n}\n\nclass ImpactProjectiles {\n  constructor() {\n    this.projectiles = new Set();\n  }\n\n  add(location) {\n    for (let i = 0; i <= 3; i++) {\n      this.projectiles.add(new ImpactProjectile(location));\n    }\n  }\n\n  update() {\n    this.projectiles.forEach((p) => {\n      p.update();\n      if (p.isDead()) {\n        this.projectiles.delete(p);\n      }\n    });\n  }\n\n  draw() {\n    this.projectiles.forEach((p) => {\n      p.draw();\n    });\n  }\n}\n\nclass Ship {\n  constructor() {\n    this.angle = radians(0);\n    this.location = createVector(width / 2, height / 2);\n    this.velocity = createVector(0, 0);\n    this.acceleration = createVector(0, 0);\n    this.direction = createVector(0, 0);\n    this.origin = createVector(0, 0);\n    this.angleAcceleration = 0.1;\n    this.projectiles = new Projectiles();\n    this.impactProjectiles = new ImpactProjectiles();\n    this.size = 25;\n    this.half = this.size / 2;\n  }\n  update() {\n    this.velocity.add(this.acceleration);\n    const maxVelocity = 3;\n    this.velocity.x = constrain(this.velocity.x, -maxVelocity, maxVelocity);\n    this.velocity.y = constrain(this.velocity.y, -maxVelocity, maxVelocity);\n    this.location.add(this.velocity);\n    this.acceleration.mult(0);\n    this.projectiles.update();\n    this.impactProjectiles.update();\n  }\n  applyForce(force) {\n    this.acceleration.add(force);\n  }\n  shoot() {\n    const SPACE = 32;\n    if (keyIsDown(SPACE) && frameCount % 4 == 0) {\n      let rightCannon = createVector(this.origin.x + 28, this.origin.y - 10);\n      rightCannon = rotatePoint(rightCannon, this.origin, this.angle);\n\n      let leftCannon = createVector(this.origin.x - 28, this.origin.y - 10);\n      leftCannon = rotatePoint(leftCannon, this.origin, this.angle);\n\n      this.projectiles.add(leftCannon, this.direction);\n      this.projectiles.add(rightCannon, this.direction);\n    }\n  }\n  draw() {\n    const size = this.size;\n    const half = this.half;\n    stroke(0);\n    strokeWeight(1);\n\n    let x1 = this.location.x - half;\n    let y1 = this.location.y;\n    let x2 = this.location.x;\n    let y2 = this.location.y - size;\n    let x3 = this.location.x + half;\n    let y3 = this.location.y;\n    this.origin = createVector(this.location.x, this.location.y - size / 2.5);\n    let v1 = createVector(x1, y1);\n    v1 = rotatePoint(v1, this.origin, this.angle);\n    let v2 = createVector(x2, y2);\n    v2 = rotatePoint(v2, this.origin, this.angle);\n    let v3 = createVector(x3, y3);\n    v3 = rotatePoint(v3, this.origin, this.angle);\n\n    this.direction = p5.Vector.sub(this.origin, v2).normalize();\n\n    push();\n\n    stroke(color('#6D4717'));\n    fill('#FFEFC0');\n    strokeWeight(0.5);\n    ambientLight(150);\n    directionalLight(255, 255, 255, 400, 200, 0);\n    translate(this.origin.x, this.origin.y, 7);\n    scale(0.3);\n    rotateZ(this.angle);\n    rotateX(radians(90));\n    model(spaceShip);\n    pop();\n\n    /*\n    blendMode(SCREEN);\n    for(let i=0; i<10; i++) {\n      push();\n\n      translate(this.origin.x + random(-2, 2), this.origin.y + i + random(-2, 2));\n      rotateZ(this.angle);\n      translate(0, 45);\n      scale(1/15);\n      strokeWeight(0);\n      rotate(radians(-90));\n      fill(0,0,0,0);\n      texture(thrustImg);\n      plane(thrustImg.width, thrustImg.height);\n      pop();\n    }\n    blendMode(BLEND);\n    */\n\n    this.projectiles.draw();\n    this.impactProjectiles.draw();\n  }\n  left() {\n    this.angle -= this.angleAcceleration;\n  }\n  right() {\n    this.angle += this.angleAcceleration;\n  }\n  forward() {\n    const force = createVector(-0.05, -0.05);\n    force.mult(this.direction);\n    this.applyForce(force);\n  }\n  backward() {\n    const force = createVector(0.05, 0.05);\n    force.mult(this.direction);\n    this.applyForce(force);\n  }\n  bounds() {\n    if (this.location.x < 0) {\n      this.location.x = width;\n    } else if (this.location.x > width) {\n      this.location.x = 0;\n    }\n    if (this.location.y < 0) {\n      this.location.y = height;\n    } else if (this.location.y > height) {\n      this.location.y = 0;\n    }\n  }\n  hit(asteroid) {\n    const projectiles = this.projectiles.hit(asteroid);\n    projectiles.forEach((p) => {\n      this.impactProjectiles.add(p.location);\n    });\n    return projectiles.length;\n  }\n}\n\nlet ship;\nlet asteroids;\nlet gameScore;\nlet $gameScore = null;\n\nfunction preload() {\n  asteroidBg = loadImage(\n    'https://closure.vps.wbsprt.com/files/asteroids/asteroids-bg_p4dfyc-optimized_oidd13.jpg'\n  );\n  // https://free3d.com/3d-model/low-poly-spaceship-37605.html\n  spaceShip = loadModel(\n    'https://closure.vps.wbsprt.com/files/asteroids/SpaceShip_x7aymb.obj',\n    true\n  );\n}\n\nfunction setup() {\n  document.querySelector('.loader').remove();\n  const canvas = createCanvas(windowWidth, windowHeight, WEBGL);\n  canvas.parent('game-container');\n  ship = new Ship();\n  asteroids = new Asteroids();\n  gameScore = 0;\n  $gameScore = document.getElementById('score');\n}\n\nfunction windowResized() {\n  resizeCanvas(windowWidth, windowHeight);\n}\n\nfunction draw() {\n  translate(-width / 2, -height / 2, 0);\n  clear();\n  if (keyIsDown(LEFT_ARROW)) {\n    ship.left();\n  }\n  if (keyIsDown(RIGHT_ARROW)) {\n    ship.right();\n  }\n  if (keyIsDown(UP_ARROW)) {\n    ship.forward();\n  }\n  if (keyIsDown(DOWN_ARROW)) {\n    ship.backward();\n  }\n\n  asteroids.update();\n  asteroids.add(ship.location);\n  gameScore += asteroids.hitBy(ship);\n  asteroids.draw();\n  drawScore();\n\n  ship.update();\n  ship.bounds();\n  ship.shoot();\n  ship.draw();\n}\n\nfunction drawScore() {\n  const sScore = gameScore.toString().padStart('4', '0');\n  $gameScore.innerText = sScore;\n}\n"]}